---
description: 关于项目一些基础信息，可以根据编码需要及更新过程，同时修改本文档
globs: 
alwaysApply: false
---
# 家装AI项目开发规则与代码导图

## 🏗️ 项目架构概览

本项目是一个基于Cloudflare全栈的家装AI资讯平台，采用前后端分离架构。

### 技术栈

#### 前端 (Frontend)
- **框架:** Next.js 15.3.1 + React 19.0.0
- **样式:** TailwindCSS 4.0
- **编辑器:** TipTap 2.12.0 (富文本编辑器)
- **语言:** TypeScript 5.0
- **部署:** Cloudflare Pages

#### 后端 (Backend)  
- **框架:** Hono 4.7.8 (Cloudflare Workers)
- **验证:** Zod 3.24.4 + Hono Zod Validator
- **认证:** JWT
- **存储:** AWS SDK S3客户端 (R2兼容)
- **语言:** TypeScript
- **部署:** Cloudflare Workers

#### 数据存储
- **主数据库:** Cloudflare D1 (SQLite)
- **文件存储:** Cloudflare R2 (S3兼容)
- **缓存:** Cloudflare KV
- **环境变量管理:** Cloudflare Workers Secrets

---

## 📁 目前项目目录结构

```
jiazhuangai2VS/
├── .git/                          # Git版本控制
├── .roo/                          # 项目规则和配置
│   └── rules-code/
│       ├── rules.md              # 基础技术规则
│       └── project-rules.md      # 本文件
├── frontend/                      # Next.js前端应用
│   ├── src/
│   │   ├── app/                  # Next.js App Router
│   │   │   ├── admin/           # 管理后台页面
│   │   │   ├── articles/        # 文章相关页面
│   │   │   ├── categories/      # 分类页面
│   │   │   ├── login/           # 登录页面
│   │   │   ├── profile/         # 用户资料页面
│   │   │   ├── register/        # 注册页面
│   │   │   ├── layout.tsx       # 全局布局
│   │   │   ├── page.tsx         # 首页
│   │   │   └── globals.css      # 全局样式
│   │   ├── components/          # React组件
│   │   ├── context/             # React Context
│   │   └── types/              # TypeScript类型定义
│   ├── public/                  # 静态资源
│   ├── package.json            # 前端依赖配置
│   ├── next.config.ts          # Next.js配置
│   ├── tailwind.config.ts      # TailwindCSS配置
│   └── tsconfig.json           # TypeScript配置
├── backend/                       # Cloudflare Workers后端
│   ├── src/
│   │   ├── routes/              # API路由
│   │   │   ├── auth.ts         # 认证路由
│   │   │   ├── articles.ts     # 文章管理路由
│   │   │   ├── categories.ts   # 分类管理路由
│   │   │   └── r2Routes.ts     # 文件上传路由
│   │   ├── services/           # 业务服务层
│   │   ├── middleware/         # 中间件
│   │   ├── types/             # 类型定义
│   │   ├── models.ts          # 数据模型
│   │   └── index.ts           # 主入口文件
│   ├── schema.sql             # 数据库结构定义
│   ├── wrangler.toml          # Workers配置
│   ├── package.json           # 后端依赖配置
│   └── tsconfig.json          # TypeScript配置
├── docs/                         # 项目文档
├── wrangler.toml                # 主项目Cloudflare配置
├── .gitignore                   # Git忽略文件
└── .nvmrc                       # Node.js版本锁定
```

---

## 🗄️ 数据库设计

### 目前D1数据库表结构（可以根据需要变更）

1. **users** - 用户表 (管理员)
   - id (主键)
   - username (用户名，唯一)
   - password (哈希密码)
   - role (角色，默认'user')
   - created_at (创建时间)

2. **categories** - 分类表
   - id (主键)
   - name (分类名，唯一)
   - slug (URL友好标识，唯一)
   - description (描述)
   - created_at, updated_at (时间戳)

3. **articles** - 文章表
   - id (主键)
   - title (标题)
   - slug (URL友好标识，唯一)
   - content_type (内容类型，默认markdown)
   - content (文章内容)
   - category_id (分类ID，外键)
   - parent_id (父文章ID，支持树形结构)
   - display_date (显示日期，用于排序)
   - created_at, updated_at (时间戳)

4. **article_attachments** - 文章附件表
   - id (主键)
   - article_id (文章ID，外键)
   - file_type (文件类型：image/video/document等)
   - file_url (R2存储URL)
   - filename (原始文件名)
   - description (描述/Alt文本)
   - created_at (创建时间)

---

## 🔌 API接口设计

### 认证接口 (/api/auth)
- POST /login - 用户登录
- POST /register - 用户注册
- GET /profile - 获取用户信息

### 分类管理 (/api/categories)
- GET / - 获取所有分类
- POST / - 创建分类
- GET /:id - 获取单个分类
- PUT /:id - 更新分类
- DELETE /:id - 删除分类

### 文章管理 (/api/articles)
- GET / - 获取文章列表
- POST / - 创建文章
- GET /:id - 获取单篇文章
- PUT /:id - 更新文章
- DELETE /:id - 删除文章

### 文件管理 (/api/r2)
- POST /upload - 文件上传
- GET /presigned-url - 获取预签名URL
- DELETE /file - 删除文件

---

## 🔧 环境配置

### Cloudflare资源配置
```toml
# KV命名空间
KV_NAMESPACE_ID = "a120d00a55da47e682ad94852b8ab4cb"
KV_NAMESPACE_NAME = "jiazhuangai"

# D1数据库
D1_DATABASE_ID = "69c4b792-fca3-48f6-a280-1c9977ed1dee" 
D1_DATABASE_NAME = "jiazhuangai"

# R2存储桶
R2_BUCKET_NAME = "jiazhuangai-files"
R2_ACCOUNT_ID = "319de3339b3b7ef960bd9ecb563f33dd"
R2_ACCESS_KEY_ID = "7522d5e5032c9356ddeb46bc6ef6cf05"
R2_SECRET_ACCESS_KEY = "e38877dcd6cb3a4d7d1041197c88fe3d68c4630fa3fbbfda55892399f5c3f281"

# R2访问地址
R2_PUBLIC_URL = "https://pub-3dc6a89ae11b4f2bb35597920365df2d.r2.dev"
```

### CORS配置
允许的前端域名：
- `https://jiazhuangai2vs.pages.dev` (Pages默认域名)
- `https://www.jiazhuangai.com` (自定义主域名)
- `http://localhost:3000` (本地开发)

---

## 📋 开发规范

### 代码组织原则
1. **前端组件化** - 使用React组件化开发，组件职责单一
2. **API设计RESTful** - 遵循REST API设计原则
3. **类型安全** - 全程使用TypeScript，定义完整的类型
4. **错误处理** - 统一的错误处理机制
5. **安全认证** - JWT Token认证，CORS跨域控制

### 文件命名规范
- 组件文件: PascalCase (如 `ArticleCard.tsx`)
- 页面文件: kebab-case (如 `article-detail.tsx`)
- 工具函数: camelCase (如 `formatDate.ts`)
- 常量文件: UPPER_SNAKE_CASE (如 `API_ENDPOINTS.ts`)

### Git提交规范
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式调整
- refactor: 代码重构
- test: 测试相关
- chore: 构建过程或辅助工具的变动

---

## 🚀 部署流程

### 前端部署 (Cloudflare Pages)
1. 连接Git仓库
2. 设置构建命令: `cd frontend && npm run build`
3. 设置输出目录: `frontend/.next`
4. 配置环境变量
5. 自动部署

### 后端部署 (Cloudflare Workers)
1. 使用Wrangler CLI部署
2. 配置D1数据库绑定
3. 配置R2存储桶绑定
4. 配置KV命名空间绑定
5. 设置环境变量和Secrets

### 数据库迁移
1. 使用wrangler执行schema.sql
2. 创建必要的索引
3. 初始化基础数据

---

## 🎯 项目特色功能

1. **富文本编辑器** - 基于TipTap的文章编辑功能
2. **文件上传** - R2存储的图片/附件管理
3. **分类管理** - 层级分类系统
4. **树形文章** - 支持父子关系的文章结构
5. **用户认证** - JWT Token认证系统
6. **响应式设计** - TailwindCSS响应式布局

---

## 📝 开发注意事项

1. **Context7服务** - 可以使用Context7获取库文档
2. **Cloudflare MCP** - 可以使用Cloudflare MCP管理云资源，也可以使用Wrangler CLI
3. **GitHub MCP** - 可以使用GitHub MCP进行代码管理，也可以使用git命令
4. **Node.js版本** - 锁定在18.18.0+
5. **跨域处理** - 严格的CORS策略控制
6. **安全考虑** - 密码哈希、JWT过期、输入验证
7. **性能优化** - 数据库索引、CDN缓存、图片压缩

---

 