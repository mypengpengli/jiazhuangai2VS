import { Env, ValidationTargets, Context, TypedResponse, Input, MiddlewareHandler } from 'hono';
import { ZodError, ZodSchema, z, SafeParseReturnType } from 'zod';

type Hook<T, E extends Env, P extends string, Target extends keyof ValidationTargets = keyof ValidationTargets, O = {}> = (result: ({
    success: true;
    data: T;
} | {
    success: false;
    error: ZodError;
    data: T;
}) & {
    target: Target;
}, c: Context<E, P>) => Response | void | TypedResponse<O> | Promise<Response | void | TypedResponse<O>>;
type HasUndefined<T> = undefined extends T ? true : false;
declare const zValidator: <T extends ZodSchema, Target extends keyof ValidationTargets, E extends Env, P extends string, In = z.input<T>, Out = z.output<T>, I extends Input = {
    in: HasUndefined<In> extends true ? { [K in Target]?: In extends ValidationTargets[K] ? In : { [K2 in keyof In]?: ValidationTargets[K][K2]; }; } : { [K in Target]: In extends ValidationTargets[K] ? In : { [K2 in keyof In]: ValidationTargets[K][K2]; }; };
    out: { [K in Target]: Out; };
}, V extends I = I>(target: Target, schema: T, hook?: Hook<z.infer<T>, E, P, Target>, options?: {
    validationFunction: (schema: T, value: ValidationTargets[Target]) => SafeParseReturnType<any, any> | Promise<SafeParseReturnType<any, any>>;
}) => MiddlewareHandler<E, P, V>;

export { type Hook, zValidator };
